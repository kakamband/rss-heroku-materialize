{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "FeedInfo.svelte",
    "FeedList.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { onMount } from \"svelte\";\nimport { getFeeds, putFeedInfos, getFeedInfos } from \"../api/rssFeedProxy.ts\";\n;\n;\nimport FeedInfo from \"./FeedInfo.svelte\";\nimport FeedList from \"./FeedList.svelte\";\nimport Auth from \"./Auth.svelte\";\nlet user = {\n    id: null,\n    name: null,\n    email: null,\n};\nlet feedInfos = [];\nlet feeds = [];\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    feeds = yield getFeeds(feedInfos);\n}));\nconst onExec = (e) => __awaiter(void 0, void 0, void 0, function* () {\n    switch (e.detail.payload) {\n        case \"confirm\":\n            feeds = yield getFeeds(feedInfos);\n            yield putFeedInfos(feedInfos);\n            break;\n        case \"getFeedInfos\":\n            const result = yield getFeedInfos();\n            if (result) {\n                feedInfos = result;\n            }\n            else {\n                alert(\"サーバからfeed情報を取得に失敗しました。\");\n            }\n            break;\n        default:\n            break;\n    }\n});\n</script>\n\n<main>\n\t<h1>Hello {user.name}!</h1>\n\n  <Auth bind:user={user} />\n  <FeedInfo bind:feedInfos={feedInfos} on:exec={onExec} />\n  <FeedList feeds={feeds} />\n</main>\n\n<svelte:head>\n\t<link rel=\"stylesheet\" href=\"https://unpkg.com/sakura.css/css/sakura.css\">\n<!-- \n\t<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/kognise/water.css@latest/dist/light.min.css\">\n\t<link rel=\"stylesheet\" href=\"https://newcss.net/new.min.css\">\n\t<link rel=\"stylesheet\" href=\"https://unpkg.com/mvp.css\">\n\t<link rel=\"stylesheet\" href=\"//writ.cmcenroe.me/1.0.4/writ.min.css\">\n\t<link rel=\"stylesheet\" href=\"https://unpkg.com/sakura.css/css/sakura.css\">\n-->\n</svelte:head>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { onMount, createEventDispatcher } from \"svelte\";\nimport { getFeeds } from \"../api/rssFeedProxy.ts\";\n;\nexport let feedInfos = [];\nlet valids = feedInfos.map(() => true);\nconst dispatch = createEventDispatcher();\nconst add = () => {\n    const id = feedInfos[feedInfos.length - 1].id + 1;\n    feedInfos = [...feedInfos, {\n            id,\n            url: \"\",\n        }];\n    valids = [...valids, true];\n};\nconst remove = (e) => {\n    const removeIndex = parseInt(e.target.name, 10);\n    feedInfos = feedInfos.filter((_, index) => index !== removeIndex);\n    valids = valids.filter((_, index) => index !== removeIndex);\n};\nconst checkValidation = (feedInfos) => __awaiter(void 0, void 0, void 0, function* () {\n    const feeds = yield getFeeds(feedInfos);\n    valids = feeds.map((feed) => feed.ok);\n});\nconst isAllValid = () => {\n    return !(valids.includes(false));\n};\nconst confirm = () => __awaiter(void 0, void 0, void 0, function* () {\n    yield checkValidation(feedInfos);\n    if (isAllValid()) {\n        dispatch(\"exec\", { payload: \"confirm\" });\n    }\n    else {\n        alert(\"不適切なFeed情報があります。\");\n    }\n});\nconst getFeedInfos = () => {\n    dispatch(\"exec\", { payload: \"getFeedInfos\" });\n};\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    yield checkValidation(feedInfos);\n}));\n</script>\n\n<style>\n  .feed-info {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  .nav {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n  }\n\n  .nav-item {\n    margin-right: 1em;\n  }\n</style>\n\n<form>\n  {#each feedInfos as feedInfo, i}\n  <div class=\"feed-info\">\n    <input type=\"url\" name={i} required bind:value={feedInfo.url}>\n\n    {#if valids[i]}\n    <span>○</span>\n    {:else}\n    <span>×</span>\n    {/if}\n\n    <input type=\"button\" name={i} value=\"削除\" on:click={remove}>\n  </div>\n  {/each}\n\n  <div class=\"nav\">\n    <input type=\"button\" class=\"nav-item\" value=\"追加\" on:click={add}>\n    <input type=\"button\" class=\"nav-item\" value=\"確定\" on:click={confirm}>\n    <input type=\"button\" class=\"nav-item\" value=\"サーバーから読込\" on:click={getFeedInfos}>\n  </div>\n</form>\n",
    "<script lang=\"ts\">;\nexport let feeds = [];\nconst sortFeed = (feed) => {\n    const contensSorted = feed.contents.sort((a, b) => {\n        if (a.date.isBefore(b.date))\n            return 1;\n        if (b.date.isBefore(a.date))\n            return -1;\n        return 0;\n    });\n    return Object.assign(Object.assign({}, feed), { contents: contensSorted });\n};\n$: feedsSorted = feeds.map((feed) => sortFeed(feed));\n</script>\n\n<style>\n  .content {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  .content-item {\n    margin-right: 1em;\n  }\n\n  .title {\n    overflow-wrap: break-word;\n    text-align: justify;\n  }\n  \n  .date {\n    white-space: nowrap;\n  }\n</style>\n\n{#each feedsSorted as feed}\n<form>\n  {#if feed.ok}\n  <details>\n    <summary>{feed.title}</summary>\n\n    <a href={feed.link} target=\"_blank\" rel=\"noopener noreferrer\">ホームページ</a>\n    <a href={feed.url} target=\"_blank\" rel=\"noopener noreferrer\">フィードのリンク</a>\n\n    {#if feed.description}\n    <p>{feed.description}</p>\n    {/if}\n\n    {#each feed.contents as content}\n    <div class=\"content\">\n      <p class=\"content-item title\"><a href={content.link} target=\"_blank\" rel=\"noopener noreferrer\">{content.title}</a></p>\n      <p class=\"date\">{content.date.format(\"YYYY/MM/DD HH:mm\")}</p>\n    </div>\n    {/each}\n  </details>\n\n  {:else}\n  <p><a href={feed.url}>{feed.url}</a>&nbsp;[{feed.status}]{feed.statusText}</p>\n  {/if}\n</form>\n{/each}\n"
  ],
  "names": [],
  "mappings": "AAmEC,IAAI,eAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAED,EAAE,eAAC,CAAC,AACH,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AACjB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,eAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC;AChCA,UAAU,eAAC,CAAC,AACV,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,CAC9B,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,QAAQ,CACzB,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,SAAS,eAAC,CAAC,AACT,YAAY,CAAE,GAAG,AACnB,CAAC;ACnDD,QAAQ,cAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,CAC9B,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,aAAa,cAAC,CAAC,AACb,YAAY,CAAE,GAAG,AACnB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,aAAa,CAAE,UAAU,CACzB,UAAU,CAAE,OAAO,AACrB,CAAC,AAED,KAAK,cAAC,CAAC,AACL,WAAW,CAAE,MAAM,AACrB,CAAC"
}